package backend.academy;

import backend.academy.Generators.EntityGenerators.BasicEntityGenerator;
import backend.academy.Generators.MazeGenerators.KrascalMazeGenerator;
import backend.academy.Generators.MazeGenerators.KrascalWithExtraEdges;
import backend.academy.Generators.MazeGenerators.PrimMazeGenerator;
import backend.academy.MazeClasses.Maze;
import backend.academy.MazeClasses.Vertex;
import backend.academy.Renderers.ConsoleMazeRenderer;
import backend.academy.Solvers.AStarMazeSolver;
import backend.academy.Solvers.BFSMazeSolver;
import backend.academy.Solvers.DijkstraMazeSolver;
import java.io.PrintStream;
import java.util.Scanner;
import lombok.experimental.UtilityClass;

@UtilityClass
public class Application {
    private final static PrintStream OUT = System.out;
    private final static int MAX_SIZE = 100;
    private final static int MIN_COORDINATE_VALUE = 0;
    private final static int MIN_FIELD_SIZE = 2;

    public static void main(String[] args) {
        int width = getNum(MIN_FIELD_SIZE, MAX_SIZE, "Width");
        int height = getNum(MIN_FIELD_SIZE, MAX_SIZE, "Height");
        int startX = getNum(MIN_COORDINATE_VALUE, width - 1, "Start X");
        int startY = getNum(MIN_COORDINATE_VALUE, height - 1, "Start Y");
        int endX = getNum(MIN_COORDINATE_VALUE, width - 1, "End X");
        int endY = getNum(MIN_COORDINATE_VALUE, height - 1, "End Y");
        OUT.println();

        Maze maze = new Maze(width, height);
        maze.generateEntities(new BasicEntityGenerator());
        maze.setStart(new Vertex(startX, startY));
        maze.setEnd(new Vertex(endX, endY));

        maze.generateEdges(new PrimMazeGenerator());
        maze.solve(new BFSMazeSolver());
        OUT.println("Generated by Prim algorythm, solved by BFS algorythm:");
        maze.showSolution(new ConsoleMazeRenderer());
        OUT.println();

        maze.generateEdges(new KrascalMazeGenerator());
        maze.solve(new DijkstraMazeSolver());
        OUT.println("Generated by Krascal algorythm, solved by Dijkstra algorythm:");
        maze.showSolution(new ConsoleMazeRenderer());
        OUT.println();

        maze.generateEdges(new KrascalWithExtraEdges());
        maze.solve(new AStarMazeSolver());
        OUT.println("Generated by Krascal algorythm with adding extra edges, solved by A* algorythm:");
        maze.showSolution(new ConsoleMazeRenderer());
        OUT.println();
    }

    private int getNum(int min, int max, String name) {
        int k;
        Scanner scanner = new Scanner(System.in);
        OUT.println(String.format("Please enter %s (from %d to %d): ", name, min, max));
        while (true) {
            k = scanner.nextInt();
            if (k >= min && k <= max) {
                break;
            }
            OUT.println(String.format("From %d to %d! Try again!", min, max));
        }
        return k;
    }
}
